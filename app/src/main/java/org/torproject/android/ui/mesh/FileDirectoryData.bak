package org.torproject.android.ui.mesh

import java.io.File
import java.text.SimpleDateFormat
import java.util.*

/**
 * Data class representing a file or folder in the drop folder directory
 */
data class FileDirectoryItem(
    val file: File,
    val name: String = file.name,
    val isDirectory: Boolean = file.isDirectory,
    val size: Long = if (file.isFile) file.length() else 0L,
    val lastModified: Long = file.lastModified(),
    val replicaInfo: ReplicaInfo? = null
) {
    fun getFormattedSize(): String {
        if (isDirectory) return ""
        
        return when {
            size >= 1024 * 1024 * 1024 -> String.format("%.1f GB", size / (1024.0 * 1024.0 * 1024.0))
            size >= 1024 * 1024 -> String.format("%.1f MB", size / (1024.0 * 1024.0))
            size >= 1024 -> String.format("%.1f KB", size / 1024.0)
            else -> "$size B"
        }
    }
    
    fun getFormattedDate(): String {
        val formatter = SimpleDateFormat("MMM dd, yyyy", Locale.getDefault())
        return formatter.format(Date(lastModified))
    }
    
    fun getDetailsText(): String {
        return if (isDirectory) {
            val childCount = file.listFiles()?.size ?: 0
            "$childCount items • ${getFormattedDate()}"
        } else {
            "${getFormattedSize()} • ${getFormattedDate()}"
        }
    }
    
    fun getIcon(): String {
        return if (isDirectory) {
            "📁"
        } else {
            when (file.extension.lowercase()) {
                "pdf" -> "📄"
                "doc", "docx" -> "📝"
                "xls", "xlsx" -> "📊"
                "ppt", "pptx" -> "📋"
                "jpg", "jpeg", "png", "gif", "bmp" -> "🖼️"
                "mp4", "avi", "mov", "mkv" -> "🎬"
                "mp3", "wav", "flac", "aac" -> "🎵"
                "zip", "rar", "7z", "tar", "gz" -> "📦"
                "txt", "md" -> "📄"
                "json", "xml", "csv" -> "📄"
                else -> "📄"
            }
        }
    }
}

/**
 * Information about file replicas in the distributed storage system
 */
data class ReplicaInfo(
    val replicaCount: Int,
    val targetReplicas: Int,
    val nodeIds: List<String>,
    val status: ReplicationStatus,
    val lastSyncTime: Long? = null
) {
    fun getStatusText(): String {
        return when (status) {
            ReplicationStatus.PENDING -> "Pending"
            ReplicationStatus.SYNCING -> "Syncing"
            ReplicationStatus.SYNCED -> "Synced"
            ReplicationStatus.FAILED -> "Failed"
            ReplicationStatus.PARTIAL -> "Partial"
        }
    }
    
    fun getStatusColor(): Int {
        return when (status) {
            ReplicationStatus.SYNCED -> android.graphics.Color.GREEN
            ReplicationStatus.SYNCING -> android.graphics.Color.BLUE
            ReplicationStatus.PENDING -> android.graphics.Color.GRAY
            ReplicationStatus.PARTIAL -> android.graphics.Color.YELLOW
            ReplicationStatus.FAILED -> android.graphics.Color.RED
        }
    }
}

/**
 * Replication status enumeration
 */
enum class ReplicationStatus {
    PENDING,    // File is waiting to be replicated
    SYNCING,    // File is currently being replicated
    SYNCED,     // File is fully replicated to target nodes
    PARTIAL,    // File is partially replicated (less than target replicas)
    FAILED      // Replication failed
}

/**
 * Drop folder configuration and state
 */
data class DropFolderConfig(
    val path: String,
    val displayName: String? = null,
    val isActive: Boolean = false,
    val autoReplication: Boolean = true,
    val targetReplicas: Int = 3,
    val watchSubfolders: Boolean = true,
    val maxFileSize: Long = 100L * 1024 * 1024, // 100MB default
    val excludePatterns: List<String> = listOf("*.tmp", "*.temp", ".DS_Store")
)

/**
 * Summary statistics for the drop folder
 */
data class DropFolderStats(
    val totalFiles: Int,
    val totalSize: Long,
    val replicatedFiles: Int,
    val pendingFiles: Int,
    val failedFiles: Int,
    val availableStorageNodes: Int
) {
    fun getReplicationPercentage(): Int {
        return if (totalFiles > 0) {
            (replicatedFiles * 100) / totalFiles
        } else 0
    }
}
